package com.revature.collection;

import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;

public class MyQueue {

	//	Ordered list of objects related to insertion order
	
	//	Follows the First-In-First-Out (FIFO) principle
	
	//Methods:
	//		poll, remove, peek and element
	
	//Other principle is: First-In-Last-Out (FILO, LIFO)
	//	Stack
	
	public static void main(String[] args) {
		
		Queue<String> myFirstQueue = new LinkedList<>();
		Queue<String> myOtherQueue = new PriorityQueue<>();
		Queue<String> myOtherOtherQueue = new ArrayDeque<>();
		
		myFirstQueue.add("Peter Pan");
		myFirstQueue.add("Marmaduke");
		myFirstQueue.add("Spawn");
		
		myOtherQueue.addAll(myFirstQueue);
		
		System.out.println(myFirstQueue);
		
//		System.out.println(myFirstQueue.poll()); 	//poll, returns the value at the head of the queue and removes it
//		System.out.println(myFirstQueue);			//returns null if empty
//		System.out.println(myFirstQueue.poll());
//		System.out.println(myFirstQueue);
//		System.out.println(myFirstQueue.poll());
//		System.out.println(myFirstQueue);
//		System.out.println(myFirstQueue.poll());
//		System.out.println(myFirstQueue);
		
//		System.out.println(myFirstQueue.remove());	//remove, also returns the value at the head of the queue and removes it
//		System.out.println(myFirstQueue);			//but will throw an exception if empty
//		System.out.println(myFirstQueue.remove());
//		System.out.println(myFirstQueue);
//		System.out.println(myFirstQueue.remove());
//		System.out.println(myFirstQueue);
//		System.out.println(myFirstQueue.remove());
//		System.out.println(myFirstQueue);
		
		System.out.println(myFirstQueue.peek());
		System.out.println(myFirstQueue);
		
		System.out.println(myFirstQueue.element());
		
		System.out.println(myOtherQueue);
		
	}
}
